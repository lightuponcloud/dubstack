/*
* jquery.riak
*
* Contains utilities for Riak CS web interface
*
* DEPENDANCIES:
*
* jquery.alerts.js
* spark-md5
*
*
*/

var i18n_catalog = {
{% for k,v in messages %}"{{ k }}": "{{ v }}"{% if not forloop.last %},{% endif %}{% endfor %}
};

function gettext(msgid, default_msg) {
  var value = i18n_catalog[msgid];
  if (typeof(value) == "undefined") {
    return default_msg;
  } else {
    return (typeof(value) == "string") ? value : value[0];
  }
}

(function($){

$.stack = function(options){
 if ( typeof(options) == "undefined" || options == null ) { options = {} };

 var RiakAPI = {
    options: $.extend({
	    token: "{{ token }}",
	    bucketName: "{{ bucket_id }}",
	    staticRoot: "{{ static_root }}",
	    errorElementID: "", // where to append error
	    rpc_url: "",
	    task_timeout: 1000,
	    attempts: 15,
            onSuccess: function(data, status){ },
	    onFailure: function(msg, xhr, status){ },
	    onProgress: function(evt){ },
	    loadingMsgColor: "green",
	    uploaded_bytes: 0,
	    chunk_size: {{ chunk_size }},
    }, options),
    get_json: function(data, callback, error_callback){
     $.ajax({
	url: RiakAPI.options.rpc_url,
	cache: false,
	dataType: "json",
	data: data,
	beforeSend: function (xhr) {
	    xhr.setRequestHeader("authorization", "Token {{ token }}");
	},
	success: function(data, status){
	    if(data&&data.hasOwnProperty("error")){
		if(!error_callback){
		  $('#'+RiakAPI.options.errorElementID).empty().append('<span class="err">'+gettext(data['error'], 'error, try later')+'</span>');
		} else {
		  error_callback(data);
		}
		return;
	    } else {
		$('#failure').hide();
	    }
	    if(callback) callback(data, status);
	}
     }).fail(function(jqxhr, textStatus, error){
	var err = textStatus + ', ' + error;
	$('#'+RiakAPI.options.errorElementID).empty().append('<span class="err">'+gettext(err, 'error, try later')+'</span>');
     });
    },
    post_json: function(url, form_data, headers, onSuccess, onFailure, onProgress){
     // ``form_data`` -- instance of ``FormData``
     $.ajax({
	url: url,
	type: 'POST',
	cache: false,
	dataType: 'json',
	data: form_data,
	processData: false,
	contentType: false,
	timeout: 480000,
	headers: headers,
	success: function(data, status, jqXHR){
	    if(data&&data.hasOwnProperty('error')){
		onFailure(gettext(data['error'], 'error, try later'), NaN, NaN);
		return;
	    }else if(status=="notmodified"){
		onFailure(gettext(status, 'error, try later'), jqXHR, status);
	    }
	    onSuccess(data, status, jqXHR);
	},
	beforeSend: function (xhr) {
	    xhr.setRequestHeader("authorization", "Token {{ token }}");
	},
        xhr: function(){
            var req = $.ajaxSettings.xhr();
            if (req){
		if (typeof req.upload == "object") {
		    req.upload.addEventListener("progress", function(evt) {
			onProgress(evt);
		    });
		}
            }
	    return req;
	}
     }).fail(function(xhr, status, msg){
      var data;
      try {
	data=$.parseJSON(xhr.responseText);
      } catch(e) {};
      if(data&&data.hasOwnProperty('error')){
        onFailure(gettext(data['error'], 'error, try later'), xhr, status);
      }else{
        onFailure(gettext("Something's went horribly wrong.", "Something's went horribly wrong."), xhr, status);
      }
     });
    },
    _get_md5: function(data, success_callback, error_callback){
	var promise = $.Deferred();
	var reader = new FileReader();
	reader.onload = function(e){
	  var spark = new SparkMD5.ArrayBuffer();
	  spark.append(e.target.result);
	  var checksum = spark.end();
	  if(checksum) promise.resolve(checksum);
	  else promise.reject();
	};
	reader.onerror = function(event){
	    reader.abort();
	    error_callback(event);
	};
	try{
	  reader.readAsArrayBuffer(data);
	}catch(e){
	  promise.reject();
	}
	promise.done(success_callback);
	promise.fail(error_callback);
    },
    _upload_thumbnail: function(file, prefix, object_key){
	if (file.type.indexOf("video/")==0){
	    // upload thumbnail
	    var video = $("#id-upload-video");
	    var thumbnail = $("#id-upload-canvas");
	    video.find("source").attr("src", URL.createObjectURL(file));
	    video.get(0).load();
	    video.on("loadedmetadata", function(e) {
		duration = video.get(0).duration;
		thumbnail[0].width = video[0].videoWidth;
		thumbnail[0].height = video[0].videoHeight;
		video[0].currentTime = Math.ceil(duration / 2);
		video.one("timeupdate", function() {
		    var ctx = thumbnail.get(0).getContext("2d");
		    ctx.drawImage(video[0], 0, 0, video[0].videoWidth, video[0].videoHeight);

		    var url = thumbnail[0].toDataURL();
		    const byteCharacters = atob(url.split(',')[1]);
		    const byteArrays = [];
		    for (let offset = 0; offset < byteCharacters.length; offset += 512) {
			const slice = byteCharacters.slice(offset, offset + 512);
			const byteNumbers = new Array(slice.length);
			for (let i = 0; i < slice.length; i++) {
			    byteNumbers[i] = slice.charCodeAt(i);
			}
			const byteArray = new Uint8Array(byteNumbers);
			byteArrays.push(byteArray);
		    }
		    const blob = RiakAPI._build_blob(byteArrays);
		    RiakAPI._get_md5(blob, function(checksum){
			var form_data = new FormData();
			form_data.append('files[]', blob, "thumbnail");
			form_data.append('prefix', prefix);
			form_data.append('object_key', object_key);
			form_data.append('md5', checksum);
			var headers = {'accept': 'application/json'};
			var post_url=RiakAPI.options.rpc_url.replace('/upload/', '/thumbnail/');
			RiakAPI.post_json(post_url, form_data, headers, function(data, status, xhr){}, function(msg, xhr, status){}, function(evt){}
			);
		    });
		});
	    })
	}
    },
    _file_upload_on_success: function(data, xhr, dom_id, prefix, file, offset, upload_id, version, etags, wasEmpty){
      if(!data){
	RiakAPI.options.onFailure(NaN, NaN, status);
	return;
      }
      if(data.hasOwnProperty('error')){
	$('#'+RiakAPI.options.errorElementID).empty().append('<span class="err">'+gettext(data['error'], 'error, try later')+'</span>');
	return;
      };
      if(xhr.status==206){
	if(file.size-data.end_byte-1==0){ // end of upload
	    RiakAPI._upload_thumbnail(file, prefix, data['object_key']);
	    RiakAPI.options.onSuccess(data, xhr.status);
	} else {
	    // upload the next chunk
	    offset = data.end_byte+1;
	    var upload_id = data['upload_id'];
	    var guid = data['guid'];
	    RiakAPI._chunked_upload(dom_id, prefix, file, offset, upload_id, guid, version, etags, false);
	}
     } else {
	if(wasEmpty){
	  // upload the same chunk again, as previous upload had no data
	  RiakAPI._chunked_upload(dom_id, prefix, file, offset, upload_id, guid, version, etags, false);
	} else {
	  if(file.size-data.end_byte-1==0){
	      RiakAPI._upload_thumbnail(file, prefix, data['object_key']);
	      RiakAPI.options.onSuccess(data, xhr.status);
	  } else {
	    // upload the next chunk
	    var upload_id=data.upload_id;
	    var guid=data.guid;
	    offset = data.end_byte+1;
	    var upload_id = data['upload_id'];
	    var guid = data['guid'];
	    RiakAPI._chunked_upload(dom_id, prefix, file, offset, upload_id, guid, version, etags, true);
	  }
	}
     }
    },
    _file_upload_on_failure: function(msg, xhr, status, dom_id, prefix, file, offset, upload_id, guid, version, etags, isEmpty){
      if(msg=='fd_error'){
	$('#'+RiakAPI.options.errorElementID).empty().append('<span class="err">'+gettext('file read error', 'file read error')+'</span>');
	return;
      } else if((status=='error'||status=='timeout')&&xhr.readyState==0){
	 var attempts = $('#'+RiakAPI.options.errorElementID).attr('data-attempts');
	 if(attempts==undefined) { attempts=5 } else { attempts = parseInt(attempts) };
	 attempts-=1;
	 $('#'+RiakAPI.options.errorElementID).attr('data-attempts', attempts);
	 if(attempts<0){
	  $('#'+RiakAPI.options.errorElementID).empty().append('<span class="err">'+gettext("connection timeout", "connection timeout")+'</span>');
	  return;
	 }
	 $('#'+RiakAPI.options.errorElementID).empty().append('<span class="err">'+gettext('network error, retrying', 'network error, retrying')+'</span>');
	 setTimeout(function(){
	    RiakAPI._chunked_upload(dom_id, prefix, file, offset, upload_id, guid, version, etags, isEmpty);
	}, 3000);
	return;
      } else if(xhr.status==400||xhr.status==403){
	$('#'+RiakAPI.options.errorElementID).empty().append('<span class="err">'+gettext(msg, msg)+'</span>');
      }
    },
    _file_upload_on_progress: function(evt, offset, file_size){
	RiakAPI.options.onProgress(evt, offset, file_size);
    },
    _build_blob: function(byteArray){ // for browser compatibility
        var blob;
	try{
	    blob = new Blob(byteArray);
	}catch(e){
	    window.BlobBuilder = window.BlobBuilder || window.WebKitBlobBuilder || window.MozBlobBuilder || window.MSBlobBuilder;
	    if(window.BlobBuilder){ // old chrome and ff
		var bb = new BlobBuilder();
		bb.append(byteArray);
		blob = bb.getBlob();
	    }else{ throw("sorry, blob not supported, browser too old") }
	}
	return blob;
    },
    _chunked_upload: function(dom_id, prefix, file, offset, upload_id, guid, version, etags, isEmpty){
	/*
	    dom_id -- DOM object ID
	    prefix -- object storage path ( directory name )
	    file -- browser's file object
	    offset -- position in file to upload from
	    upload_id -- unique upload id
	    guid -- unique object id, generated and returned by server
	    version -- dotted version vector, encoded in json and base64
	    etags -- list of md5 sums of file parts. It is passed with the last part to server
	    isEmpty -- boolean flag indicating if request should be sent without data,
		       just to check if part exists on server already
	*/
	var chunk_size = RiakAPI.options.chunk_size;
	var blob_slice = window.Blob && (Blob.prototype.slice || Blob.prototype.webkitSlice || Blob.prototype.mozSlice);
	var blob = blob_slice.call(file, offset, offset+chunk_size, file.type);
	var blob_size = blob.size;
	var attempts=$('#'+RiakAPI.options.errorElementID).attr('data-attempts');
	if(attempts==undefined) attempts=5;
	var part_num = parseInt(offset/chunk_size)+1;
	RiakAPI._get_md5(blob, function(checksum){
	  var form_data = new FormData();
	  if(isEmpty==true){
	    form_data.append('files[]', RiakAPI._build_blob([]), file.name);
	  } else {
	    form_data.append('files[]', blob, file.name);
	  }
	  form_data.append('md5', checksum);
	  form_data.append('version', version);
	  if(prefix) form_data.append('prefix', prefix);
	  if(guid) form_data.append('guid', guid);

	  var found=false;
	  for(var i=0;i!=etags.length;i++){
	    if(etags[i][0]==part_num && etags[i][1] == checksum) {
		found=true;
		break;
	    }
	  }
	  if(!found) etags.push([part_num, checksum]);

	  var totalparts = Math.ceil(file.size/chunk_size);
          if(totalparts==0||part_num==totalparts){
	    var finaletags=[];
	    for(var i=0;i!=etags.length;i++){
	      finaletags.push(etags[i][0] + "," + etags[i][1]);
	    }
            // last chunk, add etags to complete upload
	    form_data.append('etags[]', finaletags.join(","));
	  }
	  if(file.size > chunk_size){
	    offset = (part_num-1) * chunk_size;
	    var limit = offset + chunk_size - 1;
	    if(limit < 0) {limit = 0
            }else if(limit>file.size-1) {limit = file.size-1};
	    var ct_range = "bytes " + offset + "-" + limit + "/" + file.size;
	  } else {
	    var ct_range = "bytes 0-" + (file.size-1) + "/" + file.size;
	  }
	  var headers = {'content-range': ct_range, 'accept': 'application/json'};

	  if(part_num == 1){ var post_url=RiakAPI.options.rpc_url
	  } else {
	    if(upload_id==null){
	      var post_url=RiakAPI.options.rpc_url+'/'+part_num+'/'
	    } else {
	      var post_url=RiakAPI.options.rpc_url+upload_id+'/'+part_num+'/'
	    }
	  };
	  RiakAPI.post_json(post_url, form_data, headers,
	    function(data, status, xhr){ RiakAPI._file_upload_on_success(data, xhr, dom_id, prefix, file, offset, upload_id, version, etags, isEmpty) },
	    function(msg, xhr, status){ RiakAPI._file_upload_on_failure(msg, xhr, status, dom_id, prefix, file, offset, upload_id, guid, version, etags, isEmpty) },
	    function(evt){ RiakAPI._file_upload_on_progress(evt, offset, file.size) }
	  );
	}, function(event){
	    $('#'+RiakAPI.options.errorElementID).empty().append('<span class="err">'+gettext('file read error', 'file read error')+'</span>');
	    RiakAPI.options.onSuccess({}, NaN);
	});
	return etags;
    },
    file_upload: function(file, dom_id, prefix, guid, version){
	var chunk_size = RiakAPI.options.chunk_size;
	var offset=0;
	var etags = [];
	var dvvset = $.dvvset();
	var user_id = RiakAPI.getUserId();
	var modified_utc = (new Date( file.lastModified )).getTime()/1000;
	modified_utc = parseInt(modified_utc).toString();
	if(version==null){
	  var dot = dvvset.create(dvvset.new_dvv(modified_utc), user_id);
	  version = btoa(JSON.stringify(dot));
	} else {
	    // increment version
	    var dot = JSON.parse(atob(version));
	    var context = dvvset.join(dot);
	    var new_dot = dvvset.update(dvvset.new_with_history(context, modified_utc), dot, user_id);
	    new_dot = dvvset.sync([dot, new_dot]);
	    version = btoa(JSON.stringify(new_dot));
	}
	RiakAPI._chunked_upload(dom_id, prefix, file, offset, null, guid, version, etags, true);
    },
    reset_defaults: function(){
      RiakAPI.options.attempts=15;
    },
    stack_rpc: function(args, callback){
      var params = [];
      if(args){
	for(k in args){
	  params.push({'name': k, 'value': args[k]});
	}
      }
      $('#'+RiakAPI.options.errorElementID).empty().append('<span style="color:'+RiakAPI.options.loadingMsgColor+';">'+gettext('Loading..', 'Loading..')+'</span>');
      RiakAPI.get_json(params, function(data,status){
	   RiakAPI.reset_defaults();
	   if(RiakAPI.options.onSuccess) RiakAPI.options.onSuccess(data);
      }, function(data){
	  if(RiakAPI.options.onFailure){
	    RiakAPI.options.onFailure(data, NaN, NaN);
	  } else {
	    $('#'+RiakAPI.options.errorElementID).empty().append('<span class="err">'+gettext("5", "Something's went wrong.")+'</span>');
	  }
      });
    },
    get_objects_list: function(prefix){
      if(prefix){
       if(prefix.indexOf('/', prefix.length - 1) == -1) prefix = prefix+'/';
       RiakAPI.stack_rpc({'prefix': prefix});
      } else {
       RiakAPI.stack_rpc();
      }
    },
    directory_create: function(hex_prefix, directory_name){
	var form_data = {};
	form_data['directory_name'] = directory_name;
	if(hex_prefix) form_data['prefix'] = hex_prefix;
	RiakAPI.post_json(RiakAPI.options.rpc_url, JSON.stringify(form_data), {'Content-Type': 'application/json'},
	    RiakAPI.options.onSuccess, RiakAPI.options.onFailure, RiakAPI.options.onProgress);
    },
    update_object: function(bucket_id, prefix, object_key, new_name){
      RiakAPI.stack_rpc({'bucket_id': bucket_id, 'object_key': object_key, 'prefix': prefix, 'new_file_name': new_name});
    },
    delete_object: function(prefix, object_keys){
      $.ajax({
	url: RiakAPI.options.rpc_url,
	type: 'DELETE',
	cache: false,
	dataType: 'json',
	data: JSON.stringify({"prefix": prefix, "object_keys": object_keys}),
	processData: false,
	contentType: 'application/json',
	timeout: 480000,
	success: function(data, status, jqXHR){
	    if(data&&(status!='success')){
		RiakAPI.options.onFailure(data, NaN, NaN);
		return;
	    }
	    RiakAPI.options.onSuccess(data, status);
	},
	beforeSend: function (xhr) {
	    xhr.setRequestHeader("authorization", "Token {{ token }}");
	}
      }).fail(function(xhr, status, msg){
        var e=msg;
        try {
	  e=$.parseJSON(xhr.responseText);
        } catch(e) {};
        RiakAPI.options.onFailure(e, xhr, status);
       });
    },
    copy_object: function(from_bucket_id, from_prefix, from_object_key, to_object_name, to_bucket_id, to_prefix, to_object_key){
	var form_data = {};
	form_data['src_bucket_id'] = from_bucket_id;
	form_data['src_prefix'] = from_prefix;
        var srcKeys = {};
	srcKeys[from_object_key] = to_object_name;
	form_data['src_object_keys'] = srcKeys;
	form_data['dst_bucket_id'] = to_bucket_id;
	form_data['dst_prefix'] = to_prefix;
	RiakAPI.post_json(RiakAPI.options.rpc_url, JSON.stringify(form_data), {'Content-Type': 'application/json'},
	    RiakAPI.options.onSuccess, RiakAPI.options.onFailure, RiakAPI.options.onProgress);
    },
    rename_object: function(hex_prefix, src_object_key, dst_object_name){
	var form_data = {};
	if(hex_prefix!=undefined) form_data['prefix'] = hex_prefix;
	form_data['src_object_key'] = src_object_key;
	form_data['dst_object_name'] = dst_object_name;
	RiakAPI.post_json(RiakAPI.options.rpc_url, JSON.stringify(form_data), {'Content-Type': 'application/json'},
	    RiakAPI.options.onSuccess, RiakAPI.options.onFailure, RiakAPI.options.onProgress);
    },
    restore_object: function(object_key, last_modified_utc){
	var form_data = {'timestamp': last_modified_utc};
	form_data['object_key'] = object_key;
	RiakAPI.post_json(RiakAPI.options.rpc_url, JSON.stringify(form_data), {'Content-Type': 'application/json'},
	    RiakAPI.options.onSuccess, RiakAPI.options.onFailure, RiakAPI.options.onProgress);
    },
    get_object_metadata: function(bucket_id, hex_prefix, object_key){
      RiakAPI.stack_rpc({'object_key': object_key, 'prefix': prefix});
    },
    is_compatible_browser: function(){
     return !!window.FileReader;
     // For devices which give false positives for the feature detection
     //return !(new RegExp('(Android (1\\.[0156]|2\\.[01]))|(Windows Phone (OS 7|8\\.0))|(XBLWP)|(ZuneWP)|(WPDesktop)|(w(eb)?OSBrowser)|(webOS)|(Kindle/(1\\.0|2\\.[05]|3\\.0))').test(window.navigator.userAgent)||false);
    },
    slice_blob: function(){
     var slice = window.Blob && (Blob.prototype.slice || Blob.prototype.webkitSlice || Blob.prototype.mozSlice);
    },
    get_token: function(){
	return RiakAPI.options.token;
    },
    get_bucket_id: function(){
	return RiakAPI.options.bucketName;
    },
    get_action_log: function(prefix){
      var params = {};
      if(prefix) params['prefix'] = prefix;
      RiakAPI.stack_rpc(params);
    },
    get_changelog: function(object_key){
      var params = {};
      if(object_key) params['object_key'] = object_key;
      RiakAPI.stack_rpc(params);
    },
    lock: function(prefix, object_key){
      var params = {"op": "lock"};
      if(prefix){
       if(prefix.indexOf('/', prefix.length - 1) == -1) prefix = prefix+'/';
       params = {'prefix': prefix};
      }
      if(object_key) params['objects'] = [object_key];
      RiakAPI.stack_rpc(params);
    },
    unlock: function(prefix, object_key){
      var params = {"op": "unlock"};
      if(prefix){
       if(prefix.indexOf('/', prefix.length - 1) == -1) prefix = prefix+'/';
       params = {'prefix': prefix};
      }
      if(object_key) params['objects'] = [object_key];
      RiakAPI.stack_rpc(params);
    },
    get_download_url: function(root_uri, bucket_id, hex_prefix, obj_name){
     var token = RiakAPI.options.token;
     var url = root_uri+'download/'+bucket_id+'/'+obj_name;
     if(hex_prefix) url = root_uri+'download/'+bucket_id+'/'+(hex_prefix.charAt(hex_prefix.length-1)=="/"?hex_prefix:hex_prefix+"/")+obj_name;
     return url;
    },
    get_static_root: function(){
      return RiakAPI.options.staticRoot;
    },
    setErrorElementID: function(value){
      RiakAPI.options.errorElementID = value;
    },
    getUserId: function(){
      return '{{ user_id }}';
    }
 };
 return {
    get_objects_list: RiakAPI.get_objects_list,
    directory_create: RiakAPI.directory_create,
    update_object: RiakAPI.update_object,
    delete_object: RiakAPI.delete_object,
    copy_object: RiakAPI.copy_object,
    file_upload: RiakAPI.file_upload,
    get_riak_url: RiakAPI.get_riak_url,
    get_bucket_id: RiakAPI.get_bucket_id,
    get_object_metadata: RiakAPI.get_object_metadata,
    get_action_log: RiakAPI.get_action_log,
    get_changelog: RiakAPI.get_changelog,
    lock: RiakAPI.lock,
    unlock: RiakAPI.unlock,
    rename_object: RiakAPI.rename_object,
    restore_object: RiakAPI.restore_object,
    get_download_url: RiakAPI.get_download_url,
    get_static_root: RiakAPI.get_static_root,
    setErrorElementID: RiakAPI.setErrorElementID,
 };
};
})(jQuery);
